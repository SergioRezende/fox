*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ 16/04/2003            SCT0315.SPR              17:13:31 ╨
*       ╨                                                         ╨
*       гддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╤
*       ╨                                                         ╨
*       ╨ Author's Name                                           ╨
*       ╨                                                         ╨
*       ╨ Copyright (c) 2003 Company Name                         ╨
*       ╨ Address                                                 ╨
*       ╨ City,     Zip                                           ╨
*       ╨                                                         ╨
*       ╨ Description:                                            ╨
*       ╨ This program was automatically generated by GENSCRN.    ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨          SCT0315/MS-DOS Setup Code - SECTION 1          ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

#REGION 1
	*------------------------------------------------------------*
	* CLASSIFICACAO:  [?????]                           		 *
	*------------------------------------------------------------*
	* OBJETIVO....:GERAR  ARQ. SINTEGRA
	*------------------------------------------------------------*
	* COMENTARIO..:
	*------------------------------------------------------------*
	* OBS........ :
	*------------------------------------------------------------*
	* TABELAS....: EMPRESA,NOTA,NOTAENT,ITEMMOV
	*------------------------------------------------------------*
	* PARAMETROS..:
	*------------------------------------------------------------*
	* RETORNO.....:
	*------------------------------------------------------------*
	*<<<<<<<<<<<<<<<<<<<<<<<         >>>>>>>>>>>>>>>>>>>>>>>>>>>>*
	*------------------------------------------------------------*
	* Ambiente
	*------------------------------------------------------------*
	SET PROCEDURE TO ROTINAS.spr
	ON KEY LABEL ESCAPE

	*------------------------------------------------------------*
	* Variaveis  Controlando Arquivos
	*------------------------------------------------------------*
	PRIVATE LSalias
	PRIVATE LFempresa,LFnota,LFnotaent,LFitemmov,LFfornece,LFgrupo
	PRIVATE LFgrfiscal
	PRIVATE LFtabnbm,LFclasnbm,LFmapaecf,LFtipooper

	LSalias			= ALIAS()
	LFempresa		= NetArq("empresa")
	LFnota			= NetArq("nota")
	LFnotaent		= NetArq("notaent")
	LFitemmov		= NetArq("itemmov")
	LFfornece		= NetArq("fornece")
	LFgrupo  		= NetArq("grupo")
	LFgrfiscal 		= NetArq("grfiscal")
	LFTabNbm  		= NetArq("tabnbm")
	LFClasNbm 		= NetArq("clasnbm")
	LFMapaEcf 		= NetArq("mapaecf")
	LFTipooper		= NetArq("tipooper")
	LFCliente		= NetArq("clientes")
	
	IF (LFempresa+LFnota+LFnotaent+LFitemmov+;
		LFfornece+LFgrupo+LFgrfiscal+LFtabnbm+LFclasnbm+LFMapaEcf+;
		LFtipooper+LFcliente) > 100000
		*-----------------------------------------------------*
		* FALHA DE ABERTURA DE TABELAS
		*-----------------------------------------------------*
		DO ULfecha
		RETURN(0)
	ENDIF
	*------------------------------------------------------------*
	* Variaveis  abientais com influencia na biblioteca
	*   deve-se adequar a biblioteca para recebelas via parametro
	*   e nao pelo ambiente com esta sendo feito
	*------------------------------------------------------------*
	PRIVATE wp_ref_local
	PRIVATE isediting
	wp_ref_local 	=  .f.     && NAO POSSUI CONTROLE DE REFRESH LOCAL
	m.isediting		=	.F.

	*------------------------------------------------------------*
	* Variaveis  de uso Especico no Formulario
	*------------------------------------------------------------*
	PRIVATE LFAnSaida,LFStSaida,LFResCfoS,LFResUfS,LNPagina,LFcfosintegra
	PRIVATE LFAnEntrada,LFStEntrada,LFResCfoE,LFResUfE
	PRIVATE LFIpiEntrada,LFIpiSaida,LFIpiProd
	PRIVATE LFCr_ICMS,LFconv_3199
	PRIVATE LFICMProd

	STORE .F. TO LFAnSaida,LFStSaida,LFResCfoS,LFResUfS,LFcfosintegra
	STORE 0   TO LNpagina
	STORE .F. TO LFAnEntrada,LFStEntrada,LFResCfoE,LFResUfE
	STORE .F. TO LFIpiEntrada,LFIpiSaida,LFIpiProd
	STORE .F. TO LFCr_ICMS,LFCRpc_ICMS,LFconv_3199
	STORE .F. TO LFICMProd

#REGION 0
REGIONAL m.currarea, m.talkstat, m.compstat

IF SET("TALK") = "ON"
	SET TALK OFF
	m.talkstat = "ON"
ELSE
	m.talkstat = "OFF"
ENDIF
m.compstat = SET("COMPATIBLE")
SET COMPATIBLE FOXPLUS

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨                MS-DOS Window definitions                ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

IF NOT WEXIST("sct0315") ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.PJX" ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.SCX" ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.MNX" ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.PRG" ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.FRX" ;
	OR UPPER(WTITLE("SCT0315")) == "SCT0315.QPR"
	DEFINE WINDOW sct0315 ;
		FROM INT((SROW()-15)/2),INT((SCOL()-68)/2) ;
		TO INT((SROW()-15)/2)+14,INT((SCOL()-68)/2)+67 ;
		TITLE "GERAR ARQUIVO SINTEGRA" ;
		FOOTER "CT0310" ;
		FLOAT ;
		NOCLOSE ;
		SHADOW ;
		NOMINIMIZE ;
		NONE ;
		COLOR SCHEME 1
ENDIF


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨          SCT0315/MS-DOS Setup Code - SECTION 2          ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

#REGION 1




*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨              SCT0315/MS-DOS Screen Layout               ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

#REGION 1
IF WVISIBLE("sct0315")
	ACTIVATE WINDOW sct0315 SAME
ELSE
	ACTIVATE WINDOW sct0315 NOSHOW
ENDIF
@ 0,0 TO 14,67 ;
	COLOR SCHEME 23
@ 1,67 TO 13,67 ;
	COLOR SCHEME 24
@ 14,1 TO 14,66 ;
	COLOR SCHEME 24
@ 0,67 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 14,67 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,2 TO 4,15 ;
	COLOR SCHEME 23
@ 4,3 TO 4,14 ;
	COLOR SCHEME 24
@ 4,15 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 3,15 SAY "Ё" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,15 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,3 SAY "[Filial]" ;
	SIZE 1,8, 0
@ 3,6 SAY "-" ;
	SIZE 1,1, 0
@ 2,17 TO 4,41 ;
	COLOR SCHEME 23
@ 4,18 TO 4,40 ;
	COLOR SCHEME 24
@ 4,41 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 3,41 SAY "Ё" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,41 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,19 SAY "[ Periodo ]" ;
	SIZE 1,11, 0
@ 0,3 SAY "[ Escrita Fiscal - LIVRO DE SAIDA ]" ;
	SIZE 1,35, 0
@ 0,57 SAY "[CT0315]" ;
	SIZE 1,8, 0
@ 6,2 TO 8,30 ;
	COLOR SCHEME 23
@ 8,3 TO 8,29 ;
	COLOR SCHEME 24
@ 8,30 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 7,30 SAY "Ё" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 6,30 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 7,3 SAY "Filtrar Estado Destino" ;
	SIZE 1,22, 0
@ 6,41 TO 12,66 ;
	COLOR SCHEME 23
@ 12,42 TO 12,65 ;
	COLOR SCHEME 24
@ 12,66 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 6,66 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 7,66 TO 11,66 ;
	COLOR SCHEME 24
@ 6,42 SAY "[ Saidas ]" ;
	SIZE 1,10, 0
@ 2,43 TO 4,65 ;
	COLOR SCHEME 23
@ 4,44 TO 4,64 ;
	COLOR SCHEME 24
@ 4,65 SAY "ы" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 3,65 SAY "Ё" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 2,65 SAY "©" ;
	SIZE 1,1, 0 ;
	COLOR SCHEME 24
@ 3,51 SAY "/" ;
	SIZE 1,1, 0
@ 2,44 SAY "[Livro / Pg.Inicial]" ;
	SIZE 1,20, 0
@ 3,3 GET m.empresa ;
	SIZE 1,3 ;
	DEFAULT 0 ;
	PICTURE "999" ;
	WHEN _0xj10x48m() ;
	VALID _0xj10x48n() ;
	ERROR "Empresa Nao Localizada. "
@ 3,7 GET m.nome_emp ;
	SIZE 1,7 ;
	DEFAULT " " ;
	PICTURE "@!K" ;
	WHEN _0xj10x48o()
@ 3,18 GET m.dt_inicio ;
	SIZE 1,10 ;
	DEFAULT {  /  /  } ;
	WHEN _0xj10x48p() ;
	VALID _0xj10x48q()
@ 3,30 GET m.dt_fim ;
	SIZE 1,10 ;
	DEFAULT {  /  /  } ;
	WHEN isediting ;
	VALID m.dt_fim >= m.dt_inicio ;
	MESSAGE "Data Final deve ser maior ou igual a Inicial"
@ 3,48 GET LNlivro ;
	SIZE 1,2 ;
	DEFAULT 0 ;
	PICTURE "99" ;
	WHEN _0xj10x48r() ;
	VALID LNlivro > 0 ;
	ERROR "Numero deve ser > 0 "
@ 3,53 GET LNpagina ;
	SIZE 1,4 ;
	DEFAULT 0 ;
	PICTURE "9999" ;
	WHEN _0xj10x48s() ;
	VALID LNpagina > 0 ;
	ERROR "Numero deve ser > 0 "
@ 7,27 GET LSuf_destino ;
	SIZE 1,2 ;
	DEFAULT " " ;
	WHEN _0xj10x48t()
@ 7,42 GET LFAnSaida ;
	PICTURE "@*C \<A-Livro Analitico" ;
	SIZE 1,21 ;
	DEFAULT 0 ;
	WHEN _0xj10x48u() ;
	VALID _0xj10x48v()
@ 8,42 GET LFStSaida ;
	PICTURE "@*C \<B-Livro Sintetico" ;
	SIZE 1,21 ;
	DEFAULT 0 ;
	WHEN _0xj10x4a5() ;
	VALID _0xj10x4a8()
@ 9,42 GET LFResCfoS ;
	PICTURE "@*C \<C-Resumo C.F.O." ;
	SIZE 1,19 ;
	DEFAULT 0 ;
	WHEN isediting ;
	VALID _0xj10x4a9()
@ 10,42 GET LFResUfS ;
	PICTURE "@*C \<D-Resumo Estado" ;
	SIZE 1,19 ;
	DEFAULT 0 ;
	WHEN isediting ;
	VALID _0xj10x4aa()
@ 11,42 GET LFcfosintegra ;
	PICTURE "@*C \<E-CFO X SINTEGRA" ;
	SIZE 1,20 ;
	DEFAULT 0 ;
	WHEN isediting ;
	VALID _0xj10x4ab()
@ 14,5 GET m.imp_btn ;
	PICTURE "@*HN \<Processar" ;
	SIZE 1,11,1 ;
	DEFAULT 1 ;
	WHEN _0xj10x4ac() ;
	VALID _0xj10x4ad() ;
	DISABLE
@ 14,48 GET m.edit_btn ;
	PICTURE "@*HN \<Edita" ;
	SIZE 1,7,1 ;
	DEFAULT 1 ;
	WHEN _0xj10x4cq() ;
	VALID _0xj10x4cv() ;
	MESSAGE 'Permite a alteracao de dados do registro corrente'
@ 14,58 GET m.canc_btn ;
	PICTURE "@*HN \<Saida" ;
	SIZE 1,7,1 ;
	DEFAULT 1 ;
	VALID _0xj10x4el()
@ 10,5 GET m.ANTimp_btn ;
	PICTURE "@*HN \<ANTProcessar" ;
	SIZE 1,14,1 ;
	DEFAULT 1 ;
	WHEN _0xj10x4eq() ;
	VALID _0xj10x4er() ;
	DISABLE

IF NOT WVISIBLE("sct0315")
	ACTIVATE WINDOW sct0315
ENDIF

READ CYCLE MODAL ;
	ACTIVATE READACT() ;
	DEACTIVATE READDEAC()

RELEASE WINDOW sct0315

#REGION 0
IF m.talkstat = "ON"
	SET TALK ON
ENDIF
IF m.compstat = "ON"
	SET COMPATIBLE ON
ENDIF


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨               SCT0315/MS-DOS Cleanup Code               ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

#REGION 1
DO ULfecha
RETURN

**************************************


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨   SCT0315/MS-DOS Supporting Procedures and Functions    ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

#REGION 1
PROCEDURE ULfecha
	=UP_fecha("empresa" ,LFempresa)
	=UP_fecha("nota" ,LFnota)
	=UP_fecha("notaent" ,LFnotaent)
	=UP_fecha("itemmov" ,LFitemmov)
	=UP_fecha("fornece" ,LFfornece)
	=UP_fecha("grupo" ,LFgrupo)
	=UP_fecha("grfiscal" ,LFgrfiscal)
	=UP_fecha("tabnbm" ,LFTabNbm)
	=UP_fecha("grupo" ,LFClasNbm)
	=UP_fecha("mapaecf" ,LFMapaEcf)
	=UP_fecha("clientes" ,LFcliente)
	=UP_fecha("tipooper" ,LFtipooper)

	IF !EMPTY(LSalias) AND USED(LSalias)
		SELECT &LSalias
	ENDIF
	ON KEY LABEL ESCAPE
	SET FORMAT TO
RETURN


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48M           m.empresa WHEN                     ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   41   ╨
*       ╨ Variable:            m.empresa                          ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      1                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48m     &&  m.empresa WHEN
#REGION 1
ON KEY LABEL ENTER
ON KEY LABEL ESCAPE	KEYBOARD "{END}"
IF LASTKEY() = 15 AND !(isediting)
	KEYBOARD "{ESCAPE}"
ENDIF
RETURN(isediting)

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48N           m.empresa VALID                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   41   ╨
*       ╨ Variable:            m.empresa                          ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      2                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48n     &&  m.empresa VALID
#REGION 1
SET PROCEDURE TO EMPRESA.spr
RETURN(UVerifEmp(m.empresa,m.nome_emp,LASTKEY()))




*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48O           m.nome_emp WHEN                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   42   ╨
*       ╨ Variable:            m.nome_emp                         ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      3                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48o     &&  m.nome_emp WHEN
#REGION 1
SHOW GET m.nome_emp
ON KEY LABEL ESCAPE KEYBOARD "{BACKTAB}"
RETURN(.f.)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48P           m.dt_inicio WHEN                   ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   43   ╨
*       ╨ Variable:            m.dt_inicio                        ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      4                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48p     &&  m.dt_inicio WHEN
#REGION 1
IF isediting
	ON KEY LABEL ESCAPE	KEYBOARD "{END}"
ENDIF
RETURN(isediting)

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48Q           m.dt_inicio VALID                  ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   43   ╨
*       ╨ Variable:            m.dt_inicio                        ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      5                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48q     &&  m.dt_inicio VALID
#REGION 1
m.dt_fim = m.dt_inicio
SHOW GET m.dt_fim
ON KEY LABEL ESCAPE KEYBOARD "{BACKTAB}"
RETURN (.T.)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48R           LNlivro WHEN                       ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   45   ╨
*       ╨ Variable:            LNlivro                            ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      6                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48r     &&  LNlivro WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN(isediting)

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48S           LNpagina WHEN                      ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   46   ╨
*       ╨ Variable:            LNpagina                           ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      7                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48s     &&  LNpagina WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN(isediting)

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48T           LSuf_destino WHEN                  ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   47   ╨
*       ╨ Variable:            LSuf_destino                       ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Field                              ╨
*       ╨ Snippet Number:      8                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48t     &&  LSuf_destino WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN(isediting)

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48U           LFAnSaida WHEN                     ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   48   ╨
*       ╨ Variable:            LFAnSaida                          ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      9                                  ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48u     &&  LFAnSaida WHEN
#REGION 1
ON KEY LABEL ENTER  KEYBOARD "{RIGHTARROW}"
RETURN(isediting)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X48V           LFAnSaida VALID                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   48   ╨
*       ╨ Variable:            LFAnSaida                          ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      10                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x48v     &&  LFAnSaida VALID
#REGION 1
	IF LFAnSaida
		LFStSaida = .f.
		SHOW GET LFStSaida
	ENDIF
RETURN(.T.)

*---------------------------------------------------------------*
*	PROCEDURE ULimprel
*		PARAMETERS LNemp, LDMesImpr
*	FUNCTION ULvervlr
*		PARAMETERS NOTA,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
*				 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS
*---------------------------------------------------------------*
*---------------------------------------------------------------*
*  ROTINA IMPRESSAO RELATORI ANALITICO OU SITETICO
*---------------------------------------------------------------*

PROCEDURE ULSaiImprel
PARAMETERS LNemp, LDMesImpr, LNpagina

	SELECT LIVROSAI
	SET ORDER TO TAG data
	SET NEAR ON
	SEEK STR(LNemp,3)+DTOS(LDMesImpr)
	SET NEAR OFF
	LNctrnota = LIVROSAI.nota 	&&CONTADOR PRA VERRIFICAR NUMERACAO DE NF
	*******************
	*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT TO   LNimpressao
	LNimpressos = 0
	GO LNregistro
	*******************
	*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	**************************>>> REGISTRO DE SAIDAS
	LF_fim  = .f.
    LSrel = "REL220"      && relatorio padrao p/ impressoras ex: epson
    LSorienta = " FOR MONTH(data) = MONTH(LDMesImpr) AND "+;
    			"      YEAR(data)= YEAR(LDMesImpr) "+ ;
    			" WHILE  LFsegue "

	DO UPimpressao WITH	(LFLdireciona), (LFLagrega), (LFLfimagrega)

	LFcontinua = LFsegue
	************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU.AO N. PAGINA

RETURN

*----------------------------------------------------------------*
*  VEREIFICAR VALORES DA NOTA NO RELATORIO DE SAIDAS
*----------------------------------------------------------------*
*	FLG_NROS.......: .F. => NAO VERIFICA NUMERACAO (REL220_I)
*                    .T. => VERIFICA NUMERACAO (REL220)
*----------------------------------------------------------------*

FUNCTION ULvervlr
	PARAMETERS LNnota,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
			 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS,FLG_NROS
	*-------------------------------------------------------------*
	* VERIFICACAO DE NUMERACAO DE NOTA
	*-------------------------------------------------------------*
	

	IF FLG_NROS AND LNnota < 1000000		&& NAO E CUPOM
		DO WHILE LNctrnota < LNnota
		   LSnfs = STR(LNctrnota,7)
		   DO OBJ_MENS.SPR WITH  "Falta Nota Numero : "+LSnfs
		   LNctrnota = LNctrnota + 1						
		ENDDO
		LNctrnota = LNctrnota + 1						
	ENDIF
	*-------------------------------------------------------------*
	* VERIFICACAO DE VALOR DE NOTA
	*-------------------------------------------------------------*
	IF TOTAL_NOTA+VLR_IPI <> BASE_ICMS+BASE_ISENT+VLR_IPI+;
					  BASE_OUTR+BASE_ISS+icms_subs
	   LSnfs = STR(LNnota,7)
	   DO OBJ_MENS.SPR WITH ;
  	       "Erro no Fechamento da Nota  Numero : "+LSnfs
	ENDIF
RETURN(.T.)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4A5           LFStSaida WHEN                     ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   49   ╨
*       ╨ Variable:            LFStSaida                          ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      11                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4a5     &&  LFStSaida WHEN
#REGION 1
ON KEY LABEL ENTER  KEYBOARD "{RIGHTARROW}"
RETURN(isediting)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4A8           LFStSaida VALID                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   49   ╨
*       ╨ Variable:            LFStSaida                          ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      12                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4a8     &&  LFStSaida VALID
#REGION 1
IF LFStSaida
	LFAnSaida = .f.
	SHOW GET LFAnSaida
ENDIF
RETURN(.T.)


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4A9           LFResCfoS VALID                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   50   ╨
*       ╨ Variable:            LFResCfoS                          ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      13                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4a9     &&  LFResCfoS VALID
#REGION 1
RETURN(.T.)



*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4AA           LFResUfS VALID                     ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   51   ╨
*       ╨ Variable:            LFResUfS                           ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      14                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4aa     &&  LFResUfS VALID
#REGION 1
RETURN(.T.)



*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4AB           LFcfosintegra VALID                ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   52   ╨
*       ╨ Variable:            LFcfosintegra                      ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Check Box                          ╨
*       ╨ Snippet Number:      15                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4ab     &&  LFcfosintegra VALID
#REGION 1
RETURN(.T.)



*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4AC           m.imp_btn WHEN                     ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   53   ╨
*       ╨ Variable:            m.imp_btn                          ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      16                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4ac     &&  m.imp_btn WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4AD           m.imp_btn VALID                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   53   ╨
*       ╨ Variable:            m.imp_btn                          ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      17                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*



*-----------------------------------------------------------------*

FUNCTION _0xj10x4ad     &&  m.imp_btn VALID
#REGION 1
PRIVATE LDctrlFim	&&  Marca os Finais de Meses Intermediarios
					&& Qdo o Periodo informado envolver mais de um
					&& mes
*----------------------------------------------------------------------*
*
* DICA : DETECTAR DIFERENCA ENTRE VALOR CONTABIL E BASES ///
*----------------------------------------------------------------------*


	DO WHILE MONTH(m.dt_inicio) <= MONTH(m.dt_fim) AND  ;
			 YEAR(m.dt_inicio)  <= YEAR(m.dt_fim)


		IF MONTH(m.dt_inicio)   = MONTH(m.dt_fim) AND  ;
			 YEAR(m.dt_inicio)  = YEAR(m.dt_fim)
			LDctrlFim = m.dt_fim
		ELSE
			LDctrlFim = GOMONTH(m.dt_inicio,1)-DAY(GOMONTH(m.dt_inicio,1))
		ENDIF

		
		DO CtrlSaida WITH	;
				(m.empresa),(m.dt_inicio),(LDctrlFim),(LFAnSaida), ;
				(LFStSaida), (LFResCfoS), (LFResUfS), LNpagina,;
				(LSuf_destino)

		m.dt_inicio =	GOMONTH(m.dt_inicio,1)
	ENDDO

	SHOW WINDOW SCT0315 TOP
RETURN

*-------------------------------------------------------------------*
*	PROCEDURE CtrlSaida
*   PROCEDURE ULProcSaida   PARAM LNEmp,LDDtInicio,LDDtFim
*	FUNCTION  ULGeraSai   PARAM LNEmp,LDDtInicio,LDDtFim
*	FUNCTION  ULArqSaida  PARAM LNemp,LDdtIni,LDdtFim,LSTipo
*-------------------------------------------------------------------*

PROCEDURE CtrlSaida
PARAMETERS empresa,dt_inicio,dt_fim,LFAnSaida, ;
				LFStSaida, LFResCfo, LFResUf, LNpagina, LSuf_destino

	PRIVATE	LSProcesso, LNctrnota


	PRIVATE dbf_NFSTMP, als_NFSTMP, dbf_NFS
	PRIVATE dbf_ITMTMP, als_ITMTMP, dbf_ITM
	PRIVATE dbf_TIPTMP, als_TIPTMP, dbf_TIP


	*----------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "NFS" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_NFSTMP    = wp_dirtmp+LSaliastmp+".DBF"
	als_NFSTMP    = LSaliastmp

	*----------------------------------------------------------*

	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "ITM" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_ITMTMP    = wp_dirtmp+LSaliastmp+".DBF"
	als_ITMTMP    = LSaliastmp


	*----------------------------------------------------------*

	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "TIP" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TIPTMP    = wp_dirtmp+LSaliastmp+".DBF"
	als_TIPTMP    = LSaliastmp


	*----------------------------------------------------------*
	*    GERAR ARQ. RESUMO CONTENDO SO AS NOTAS DO PERIODO E DA
	* EMPRESA SELECIONADA PARA ACELERAR OS OUTROS SELECTs
	*----------------------------------------------------------*
	dbf_NFS         = wp_dirdat+'NOTA.DBF'
	dbf_ITM  		= wp_dirdat+"ITEMMOV.DBF"

    IF M.dt_fim < {01.01.2003}
		dbf_TIP  		= "L:\TMP\CFO\TIPOOPER.DBF"
	ELSE
		dbf_TIP         =  UPobterPath("TIPOOPER",.F.)+"TIPOOPER.DBF"
	ENDIF

	*----------------------------------------------------------*
	

	IF !EMPTY(LSuf_destino)
		SELECT  ;
           CH_OPERA+CH_PRODU+CH_MOTIV+;
              CH_DESTI+CH_CONTR+CH_CONDI+TIPO AS KEY_TIPO,;
		    EMPRESA, NOTA , SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, TIPO , ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
		FROM &dbf_NFS ;
		WHERE   	empresa = M.EMPRESA;
			AND data >= M.dt_inicio AND  data <= M.dt_fim ;
			AND ch_opera <> "5" ;
			AND UF = LSuf_destino ;
	    INTO TABLE &dbf_NFSTMP
	ELSE
		SELECT ;
		      CH_OPERA+CH_PRODU+CH_MOTIV+;
              CH_DESTI+CH_CONTR+CH_CONDI+TIPO AS KEY_TIPO,;
   	        EMPRESA, NOTA , SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, TIPO , ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
		FROM &dbf_NFS ;
		WHERE   	empresa = M.EMPRESA;
			AND data >= M.dt_inicio AND  data <= M.dt_fim ;
			AND ch_opera <> "5" ;
	    INTO TABLE &dbf_NFSTMP
	ENDIF
	*----------------------------------------------------------*
	*  SELECIONANDO ITENS DO MOVIMENTO  E ITENS DA NF DE SAIDA
	*----------------------------------------------------------*

	SELECT ;
         CH_OPERA+CH_PRODU+CH_MOTIV+;
              CH_DESTI+CH_CONTR+CH_CONDI+TIPO AS KEY_TIPO,;
	       EMPRESA, NOTA , SERIE, DATA, CODIGO,TP_MERCAD, VLRVENDA,QTDE,;
            CFO, OPERACAO, FAVORECIDO,;
			TIPO,BASE_ISS,  ALIQ_ISS,  VLR_ISS, ;
			BASE_CALC,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLRIPI ;
		FROM &dbf_ITM ;
		WHERE  	!(ch_opera $"56") ;
			AND empresa = m.empresa ;
			AND data >= dt_inicio ;
			AND data <= dt_fim ;		
	    INTO TABLE &dbf_ITMTMP

	*---------------------------------------------------------------*

     SELECT CH_OPERA+CH_PRODU+CH_MOTIV+;
              CH_DESTI+CH_CONTR+CH_CONDI+TIPO AS KEY_TIPO,;
            * FROM &dbf_TIP ;
        WHERE PROCESSO $ "Ss" ;
	    INTO TABLE &dbf_TIPTMP

	*---------------------------------------------------------------*

	DO ULProcSaida  WITH ;
				(m.empresa),(m.dt_inicio),(m.dt_fim),(LFAnSaida), ;
				(LFStSaida), (LFResCfo), (LFResUf), LNpagina

	*----------------------------------------------------------*
	SELECT &als_NFSTMP
	USE
	
	SELECT &als_ITMTMP
	USE
	
	

	SELE nota
RETURN				


*-------------------------------------------------------------------*


*-------------------------------------------------------------------*
PROCEDURE ULProcSaida
	*------------------------------------------------------------*
	* CLASSIFICACAO:  [????]
	*------------------------------------------------------------*
	* OBJETIVO....: Controla o Processo de Impressao dos relatorios
	*	de saida nos varios meses e mantendo-os agregados
	*------------------------------------------------------------*
	* COMENTARIO..: A rotina permite que o periodo informado seja
	*		impresso por mes e controla a agregacao dos relatorios
	*------------------------------------------------------------*
	* OBS........ :
	*------------------------------------------------------------*
	*  TABELAS....:
	*------------------------------------------------------------*
	*  PARAMETROS..:
	*		LNemp..........: Empresa
	*		LDDtInicio.....: Data inicial
	*       LDDtFim........: Data Final
	*       LFAnSaida......: Flag de Solicitaca Rel Analitico de Saida
	*       LFStSaida......: Flag de Solicitaca Rel Sintetico de Saida
	*		LFResCfo.......: Flag de Solicitaca Rel Sintetico de Saida
	*		, LFResUf, LNpagina
	*
	*------------------------------------------------------------*
	*  RETORNO.....:                                             *
	*------------------------------------------------------------*
	PARAMETERS LNEmp,LDDtInicio,LDDtFim, LFAnSaida, ;
				LFStSaida, LFResCfo, LFResUf, LNpagina

	LFLdireciona  = .F. && Ativa PRTSETUP para direcionar impressao DEF(.T.)
	LFLagrega 	  = .F. && Agrega o ??.REL em ??.AGR			    DEF(.F.)
	LFLfimagrega  = .F. && Qdo. Estiver agregando => encerra        DEF(.F.)


	**********************************************************************
	m.inscricao 	= empresa.inscricao
	LDdtimpr  		=  LDDtInicio	&& VAI ORIENTAR A IMPRESSAO MES A MES
	LFcontinua 		= .t.  			&& CAPTURA O VALOR DE LFsegue
	*********************>>> RELATORIO GERAL <<<*********************
	LNpagina = LNpagina - 1   && DESCONTA O VLR. INICIAL DE _PAGENO


	
	*   DETERMINA O PERIODO DE MES PARA IMPRESSAO ********


	LDper_ini = LDDtInicio
	LDper_fim = LDDtFim

	*----------------------------------------------------------------*
	*--------------------------------------------------------------*

	* 1a) Seleciona Todas Notas de Saida Normal (Nao Relacionadas a Cupons)
	* 2a) Relaciona Todas Notas C╒pias de Cupons (Zerando Valores)
	* 3a) Totaliza os Cupons (Agrupando por Dia,CFO e Aliquota)
    * OBS : 1a UNION 2a (UNION 3a)


	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "TM1" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMP1  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMP1  = LSaliastmp
	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "TM2" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMP2  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMP2  = LSaliastmp
	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "LVR" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMPLIVRO  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMPLIVRO  = LSaliastmp

	*--------------------------------------------------------------*
    *   Relacionar Todas NFS sem vinculo com CUPOM
    * (As Canceladas nao sao incluidas neste select por nao haver itens
    *  relacionado pois os mesmos sao excluidos no cancelamento)
	*--------------------------------------------------------------*

   *  Selecionando notas sem cupom e nao canceladas

*   SET STEP ON
   SELECT NF.nota AS A,NF.serie,NF.data,NF.HORA , ;
          NF.uf,;
		  IIF(IT.tp_mercad <> 2 ,TP.cfo, TP.cfosubs) as B,;
   		  NF.status,NF.OPERACAO, NF.cupom, ;
		  SUM(IT.base_iss) AS C,;
		  SUM(IT.base_iss) AS D,;
		  NF.ALIQ_ISS,;
		  SUM(IT.vlr_iss) AS E,;
	  	  SUM(IT.base_calc) AS F,;
	  	  IT.aliq_icms,;
	  	  SUM(IT.Base_calc*IT.aliq_icms/100) AS G,;
	  	  SUM(IT.base_sbbrt) AS H,;
	  	  SUM(IT.base_subs) AS BASE_SUBS ,;
	  	  SUM(IT.icms_subs) AS ICMS_SUBS ,;
	 	  SUM(IT.base_isent) AS BASE_ISENT ,;
		  SUM(IT.base_outr) AS BASE_OUTR, ;
		  SUM(IT.base_isipi) AS BASE_ISIPI, ;
		  SUM(IT.base_ipi) AS BASE_IPI, ;
		  SUM(IT.vlripi) AS VLR_IPI, ;
          SUM(IT.vlrvenda-IT.base_iss-IT.vlripi) AS TOTPRODUTO,;
		  NF.vlrfrete,NF.vlrseguro,NF.vlrdespes,;
		  SUM(IT.vlrvenda+IT.icms_subs+IT.vlripi) AS TOTAL_NOTA;
   	FROM  &dbf_NFSTMP NF,;
   	      &dbf_TIPTMP TP,;
   	      &dbf_ITMTMP IT ;
    WHERE  NF.status = 1;
   		  AND NF.operacao = "S";
   		  AND NF.CUPOM = 0;
   		  AND TP.KEY_TIPO = NF.KEY_TIPO;
   		  AND LEFT(IT.OPERACAO,1) = "S" ;
   	 	  AND IT.EMPRESA = NF.EMPRESA;
   		  AND IT.NOTA = NF.NOTA;
   		  AND IT.SERIE = NF.SERIE;
    GROUP BY NF.NOTA, B, IT.ALIQ_ICMS ;
    INTO CURSOR TMP1

   * RENOMEANDO OS CAMPOS

   SELECT NF.A AS NFS ,  NF.serie,   NF.data,  NF.HORA , ;
          NF.uf, ;
		  NF.B as SET_CFO,;
   		  NF.status, NF.OPERACAO, NF.cupom, ;
		  NF.C      AS TOTSERVICO,;
		  NF.D      AS BASE_ISS,;
		  NF.ALIQ_ISS,;
		  NF.E      AS VLR_ISS,;
	  	  NF.F      AS BASE_ICMS,;
	  	  NF.aliq_icms,;
	  	  NF.G      AS VLR_ICMS,;
	  	  NF.H      AS BASE_SBBRT,;
	  	  NF.BASE_SUBS ,;
	  	  NF.ICMS_SUBS ,;
	 	  NF.BASE_ISENT ,;
		  NF.BASE_OUTR, ;
		  NF.BASE_ISIPI, ;
		  NF.BASE_IPI, ;
		  NF.VLR_IPI, ;
          NF.TOTPRODUTO,;
		  NF.vlrfrete,   NF.vlrseguro,    NF.vlrdespes,;
		  NF.TOTAL_NOTA;
   	FROM  TMP1  NF;
    INTO TABLE L:\TMP\TMP1


   *  Unificado notas sem cupom e nao canceladas com canceladas sem cupom


   SELECT NF.nota AS NFS ,  NF.serie,   NF.data,  NF.HORA,  ;
          NF.uf, ;
		  NF.CFO  as SET_CFO,;
   		  NF.status, NF.OPERACAO, NF.cupom, ;
		  NF.base_iss  AS TOTSERVICO,;
		  NF.base_iss  AS BASE_ISS,;
		  NF.ALIQ_ISS,;
		  NF.vlr_iss     AS VLR_ISS,;
	  	  NF.base_icms   AS BASE_ICMS,;
	  	  NF.aliq_icms,;
	  	  NF.vlr_icms AS VLR_ICMS,;
	  	  NF.base_sbbrt AS BASE_SBBRT,;
	  	  NF.base_subs   AS BASE_SUBS ,;
	  	  NF.icms_subs  AS ICMS_SUBS ,;
	 	  NF.base_isent AS BASE_ISENT ,;
		  NF.base_outr  AS BASE_OUTR, ;
		  NF.base_isipi  AS BASE_ISIPI, ;
		  NF.base_ipi  AS BASE_IPI, ;
		  NF.vlr_ipi    AS VLR_IPI, ;
          NF.total_Nota-NF.base_iss-NF.vlr_ipi AS TOTPRODUTO,;
		  NF.vlrfrete,   NF.vlrseguro,    NF.vlrdespes,;
		  NF.total_nota   AS TOTAL_NOTA;
   	FROM  &dbf_NFSTMP  NF;
    WHERE ;
              NF.status = 2;
   		  AND NF.operacao =  "S"         ;
   		  AND NF.CUPOM = 0               ;
    GROUP BY NF.NOTA, SET_CFO, NF.ALIQ_ICMS ;
    INTO TABLE L:\TMP\TMP2

   SELE TMP2
   APPEND FROM L:\TMP\TMP1 && SUBSTITUI O UNION


   *  (Unificado notas sem cupom e nao canceladas com canceladas sem cupom)
   * e informativo de cupons


	(SELECT  NF.NOTA AS NFS, NF.SERIE, NF.DATA, NF.HORA, ;
	         NF.UF, NF.CFO as SET_CFO, ;
	        STATUS,'C' as OPERACAO, NF.CUPOM, ;
			NF.TOTSERVICO*0 as TOTSERVICO, ;
			NF.BASE_ISS*0   as BASE_ISS, ;
			NF.ALIQ_ISS*0   as  ALIQ_ISS, ;
			NF.VLR_ISS*0    as  VLR_ISS, ;
			NF.BASE_ICMS*0  as BASE_ICMS,;
			NF.ALIQ_ICMS*0  as ALIQ_ICMS,;
			NF.VLR_ICMS*0   as VLR_ICMS, ;
			NF.BASE_SBBRT*0 as BASE_SBBRT,;
			NF.BASE_SUBS*0 as BASE_SUBS,;
			NF.ICMS_SUBS*0 as  ICMS_SUBS, ;
			NF.BASE_ISENT*0 as BASE_ISENT,;
			NF.BASE_OUTR*0 as BASE_OUTR,;
			NF.BASE_ISIPI*0 as  BASE_ISIPI,;
			NF.BASE_IPI*0 as BASE_IPI,;
			NF.VLR_IPI*0 as VLR_IPI,;
			NF.TOTPRODUTO*0 as TOTPRODUTO,;
			NF.VLRFRETE*0 as VLRFRETE,;
			NF.VLRSEGURO*0 as VLRSEGURO, ;
			NF.VLRDESPES*0 as VLRDESPES, ;
			NF.TOTAL_NOTA*0 as TOTAL_NOTA ;	
	FROM &dbf_NFSTMP NF;
	WHERE       nota < 1000000 ;
		   	AND cupom > 0) ;
    INTO TABLE L:\TMP\TMP3

    SELE TMP3
	APPEND FROM  L:\TMP\TMP2  && SUBSTITUI O UNION

   *  ((Unificado notas sem cupom e nao canceladas com canceladas sem cupom)
   * e informativo de cupons)   COM TOTALIZADORES DIARIOS DE CUPONS

    SELECT INT(VAL(CHRTRAN( ;
              "2"+STR(DAY(NF.data),2)+STR(MONTH(NF.data),2);
              +STR(IT.aliq_icms,2)," ","0"))) AS A , ;
	        NF.SERIE, NF.DATA, '99:99:99' AS HORA,  NF.uf, ;
		  IIF(IT.tp_mercad <> 2 ,TP.cfo, TP.cfosubs) as B,;
   		  NF.status, NF.OPERACAO, NF.cupom, ;
		  SUM(IT.base_iss) AS C,;
		  SUM(IT.base_iss) AS D,;
		  NF.ALIQ_ISS,;
		  SUM(IT.vlr_iss) AS E,;
	  	  SUM(IT.base_calc) AS F,;
	  	  IT.aliq_icms,;
	  	  SUM(IT.Base_calc) AS G,;
	  	  SUM(IT.base_sbbrt) AS H,;
	  	  SUM(IT.base_subs) AS I,;
	  	  SUM(IT.icms_subs) AS J,;
	 	  SUM(IT.base_isent) AS L,;
		  SUM(IT.base_outr) AS M,;
		  SUM(IT.base_isipi) AS N,;
		  SUM(IT.base_ipi) AS O,;
		  SUM(IT.vlripi) AS P,;
          SUM(IT.vlrvenda-IT.base_iss-IT.vlripi) AS Q,;
		  NF.vlrfrete,NF.vlrseguro,NF.vlrdespes,;
		  SUM(IT.vlrvenda)  AS R;
   	FROM  &dbf_NFSTMP NF,;
   	      &dbf_TIPTMP TP,;
   	      &dbf_ITMTMP  IT ;
    WHERE  NF.status = 1;
   		  AND NF.operacao = "S";
   		  AND NF.CUPOM > 0;
   		  AND TP.KEY_TIPO = NF.KEY_TIPO;
   		  AND LEFT(IT.OPERACAO,1) = "S";
   	 	  AND IT.EMPRESA = NF.EMPRESA;
   		  AND IT.NOTA = NF.NOTA;
   		  AND IT.SERIE = NF.SERIE;
    GROUP BY A, B, IT.ALIQ_ICMS ;
    INTO CURSOR TMP1

   * RENOMEANDO OS CAMPOS

   SELECT NF.A AS NFS ,  NF.serie,   NF.data,  NF.HORA , ;
          NF.uf, ;
		  NF.B as SET_CFO,;
   		  NF.status, NF.OPERACAO, NF.cupom, ;
		  NF.C      AS TOTSERVICO,;
		  NF.D      AS BASE_ISS,;
		  NF.ALIQ_ISS,;
		  NF.E      AS VLR_ISS,;
	  	  NF.F      AS BASE_ICMS,;
	  	  NF.aliq_icms,;
	  	  NF.G      AS VLR_ICMS,;
	  	  NF.H      AS BASE_SBBRT,;
	  	  NF.I      AS BASE_SUBS ,;
	  	  NF.J      AS ICMS_SUBS ,;
	 	  NF.L      AS BASE_ISENT ,;
		  NF.M      AS BASE_OUTR , ;
		  NF.N      AS BASE_ISIPI, ;
		  NF.O      AS BASE_IPI, ;
		  NF.P      AS VLR_IPI, ;
		  NF.Q      AS TOTPRODUTO,;
		  NF.vlrfrete,   NF.vlrseguro,    NF.vlrdespes,;
		  NF.R      AS TOTAL_NOTA;
   	FROM  TMP1  NF;
    INTO TABLE L:\TMP\TMP4

    SELE TMP4
    APPEND FROM L:\TMP\TMP3 && SUBSTITUICAO DE UNION



	*----------------------------------------------------------------*

	IF LFAnSaida OR LFStSaida
		DO ULSaiImprel WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	**************************>>> RESUMO POR CFO
	IF LFResCfo or LFcfosintegra
		DO ULSaiImpcfo WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	**************************>>> RESUMO POR UF
	IF LFResUf
		DO ULSaiImpuf WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	*-----------------------------
RETURN	
	

*---------------------------------------------------------------*
*	PROCEDURE ULimprel
*		PARAMETERS LNemp, LDMesImpr
*	FUNCTION ULvervlr
*		PARAMETERS NOTA,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
*				 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS
*---------------------------------------------------------------*
*---------------------------------------------------------------*
*  ROTINA IMPRESSAO RELATORI ANALITICO OU SITETICO
*---------------------------------------------------------------*

PROCEDURE ULSaiImprel
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina



	SELECT  NFS AS NOTA, SERIE, DATA, HORA, UF, SET_CFO AS CFO, ;
	        STATUS, OPERACAO, CUPOM, ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, ;
			BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, ;
			VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
	FROM L:\TMP\TMP4 ;
	ORDER BY DATA,NOTA ;
    INTO CURSOR LIVROSAI


	SELECT LIVROSAI
	GO TOP
	LNctrnota = LIVROSAI.nota 	&&CONTADOR PRA VERRIFICAR NUMERACAO DE NF
	*******************
	*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT TO   LNimpressao
	LNimpressos = 0
	GO LNregistro
	*******************
	*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	**************************>>> REGISTRO DE SAIDAS
	LF_fim  = .f.
    LSrel = "REL220"      && relatorio padrao p/ impressoras ex: epson
    LSorienta = " WHILE  LFsegue "

	DO UPimpressao WITH	(LFLdireciona), (LFLagrega), (LFLfimagrega)

	LFcontinua = LFsegue
	************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU.AO N. PAGINA


	*---------------------------------------------------------*
	IF USED(als_TMP1)
		SELECT &als_TMP1
		USE
	ENDIF
	IF USED(als_TMP2)
		SELECT &als_TMP2
		USE
	ENDIF

	IF USED(als_TMPLIVRO)
		SELECT &als_TMPLIVRO
		USE
	ENDIF

RETURN

*----------------------------------------------------------------*
*  VEREIFICAR VALORES DA NOTA NO RELATORIO DE SAIDAS
*----------------------------------------------------------------*
*	FLG_NROS.......: .F. => NAO VERIFICA NUMERACAO (REL220_I)
*                    .T. => VERIFICA NUMERACAO (REL220)
*----------------------------------------------------------------*

FUNCTION ULvervlr
	PARAMETERS LNnota,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
			 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS,FLG_NROS
	*-------------------------------------------------------------*
	* VERIFICACAO DE NUMERACAO DE NOTA
	*-------------------------------------------------------------*
	

	IF FLG_NROS AND LNnota < 1000000		&& NAO E CUPOM
		DO WHILE LNctrnota < LNnota
		   LSnfs = STR(LNctrnota,7)
		   DO OBJ_MENS.SPR WITH  "Falta Nota Numero : "+LSnfs
		   LNctrnota = LNctrnota + 1						
		ENDDO
		LNctrnota = LNctrnota + 1						
	ENDIF
	*-------------------------------------------------------------*
	* VERIFICACAO DE VALOR DE NOTA
	*-------------------------------------------------------------*
	IF TOTAL_NOTA+VLR_IPI <> BASE_ICMS+BASE_ISENT+VLR_IPI+;
					  BASE_OUTR+BASE_ISS+icms_subs
	   LSnfs = STR(LNnota,7)
       WAIT WINDOW "Erro no Fechamento da Nota  Numero : "+LSnfs NOWAIT
	
*	   DO OBJ_MENS.SPR WITH ;
 * 	       "Erro no Fechamento da Nota  Numero : "+LSnfs
	ENDIF
RETURN(.T.)


PROCEDURE ULSaiImpcfo   	&& RESUMO POR CFO
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina

	*----------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "CRS" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMPCURSOR = wp_dirtmp+LSaliastmp+".DBF"
	als_TMPCURSOR  = LSaliastmp
	*----------------------------------------------------------*

    set step on

	IF !LFcfosintegra
		SELECT  SET_CFO AS CFO,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
   	    FROM L:\TMP\TMP4 ;
		WHERE       status = 1 ;
		   AND  operacao  = "S";
    	GROUP BY CFO;
	    ORDER BY CFO;
    	INTO CURSOR LIVROSAI
	ELSE
		SELECT  "5.00" AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
   	    FROM L:\TMP\TMP4 ;
		WHERE       status = 1 ;
		   AND  operacao  = "S" ;
		   AND  cupom > 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP1CURSOR


		SELECT * FROM TMP1CURSOR ;
		UNION ;
		SELECT  "CANC" AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
   	    FROM L:\TMP\TMP4 ;
		WHERE       status = 2 ;
		   AND  operacao  = "S" ;
		   AND  cupom > 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP2CURSOR



		SELECT * FROM TMP2CURSOR ;
		UNION ;
		SELECT  SET_CFO AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
   	    FROM L:\TMP\TMP4 ;
		WHERE       status = 1 ;
		   AND  operacao  = "S" ;
		   AND  cupom = 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP3CURSOR

		SELECT  SET_CFO AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		 FROM TMP3CURSOR ;
			GROUP BY CFO;
    		ORDER BY CFO;
			    INTO CURSOR LIVROSAI
	ENDIF

	IF EOF()
 		SELE nota
		UNLOCK
 		RETURN
 	ENDIF		
	GO TOP
*******************
*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT  TO LNimpressao
	LNimpressos = 0
	GO LNregistro
*******************
*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
**************************>>> REGISTRO DE SAIDAS
    LSrel = "REL220A"      && relatorio padrao p/ impressoras ex: epson

    LSorienta = " WHILE  LFsegue "

	DO UPimpressao WITH 	(LFLdireciona), (LFLagrega), (LFLfimagrega)
	LFcontinua = LFsegue
************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU AO N. PAGINA
RETURN



PROCEDURE ULSaiImpuf   && RESUMO POR ESTADO
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina


	SELECT  UF,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
    FROM L:\TMP\TMP4 ;
	WHERE       status = 1 ;
		   AND  operacao  = "S";
    GROUP BY UF;
    ORDER BY UF;
    INTO CURSOR LIVROSAI


	IF EOF()
 		SELE nota
		UNLOCK
 		RETURN
 	ENDIF		
	GO TOP
*******************
*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT  TO LNimpressao
	LNimpressos = 0
	GO LNregistro
*******************
*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
**************************>>> REGISTRO DE SAIDAS
    LSrel = "REL220B"      && relatorio padrao p/ impressoras ex: epson
    LSorienta =  " WHILE  LFsegue "
	DO UPimpressao WITH 	(LFLdireciona), (LFLagrega), (LFLfimagrega)
	LFcontinua = LFsegue
************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU AO N. PAGINA
RETURN


FUNCTION ULini
	LF_fim  = .f.
RETURN(" ")

FUNCTION ULfim
	LF_fim  = .t.
RETURN(" ")



*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4CQ           m.edit_btn WHEN                    ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   54   ╨
*       ╨ Variable:            m.edit_btn                         ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      18                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*

FUNCTION _0xj10x4cq     &&  m.edit_btn WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4CV           m.edit_btn VALID                   ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   54   ╨
*       ╨ Variable:            m.edit_btn                         ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      19                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4cv     &&  m.edit_btn VALID
#REGION 1
=btn_val1('EDIT')
RETURN

PROCEDURE BTN_VAL1
	PARAMETER tecla, m.chv_ler, m.chv_compara, m.chv_brow
	LN_prxobj = _CUROBJ
	ON KEY LABEL ENTER
    DO CASE
		CASE tecla = "EDIT" AND !isediting   && INICIA EDICAO
			LFArqSaida = .F.       && ARQ TMP DEVE SER GERADO AO PROCESSAR
			SHOW GET edit_btn,1 PROMPT "\<Ok"
			SHOW GET m.imp_btn  DISABLE
			isediting  = .t.
			_CUROBJ = 1	
		    ON KEY LABEL ESCAPE KEYBOARD "{BACKTAB}"
			ON KEY LABEL END DO BTN_VAL1 WITH 'DELETE'
		CASE tecla = "EDIT" AND isediting     && CONFIRMA EDICAO
			SHOW GET edit_btn,1 PROMPT "\<Edita"
			isediting = .f.
			_CUROBJ = 1	
			IF  m.dt_fim < m.dt_inicio
				SHOW GET m.imp_btn DISABLE
			ELSE
				SHOW GET m.imp_btn  ENABLE
			ENDIF
		    ON KEY LABEL ESCAPE
			ON KEY LABEL END
		CASE tecla = "DELETE" AND isediting     && CANCELA EDICAO
			SHOW GET edit_btn,1 PROMPT "\<Edita"
			isediting = .f.
			_CUROBJ = 1	
			SHOW GET m.imp_btn  DISABLE
		    ON KEY LABEL ESCAPE
			ON KEY LABEL END
	ENDCASE
RETURN

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4EL           m.canc_btn VALID                   ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   55   ╨
*       ╨ Variable:            m.canc_btn                         ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      20                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4el     &&  m.canc_btn VALID
#REGION 1
ON KEY LABEL ENTER
CLEAR GETS
CLEAR READ
isediting = .f.
RETURN .T.

*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4EQ           m.ANTimp_btn WHEN                  ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   56   ╨
*       ╨ Variable:            m.ANTimp_btn                       ╨
*       ╨ Called By:           WHEN Clause                        ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      21                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*
FUNCTION _0xj10x4eq     &&  m.ANTimp_btn WHEN
#REGION 1
ON KEY LABEL ENTER
RETURN


*       жддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╥
*       ╨                                                         ╨
*       ╨ _0XJ10X4ER           m.ANTimp_btn VALID                 ╨
*       ╨                                                         ╨
*       ╨ Function Origin:                                        ╨
*       ╨                                                         ╨
*       ╨ From Platform:       MS-DOS                             ╨
*       ╨ From Screen:         SCT0315,     Record Number:   56   ╨
*       ╨ Variable:            m.ANTimp_btn                       ╨
*       ╨ Called By:           VALID Clause                       ╨
*       ╨ Object Type:         Push Button                        ╨
*       ╨ Snippet Number:      22                                 ╨
*       ╨                                                         ╨
*       сддддддддддддддддддддддддддддддддддддддддддддддддддддддддд╫
*



*-----------------------------------------------------------------*

FUNCTION _0xj10x4er     &&  m.ANTimp_btn VALID
#REGION 1
PRIVATE LDctrlFim	&&  Marca os Finais de Meses Intermediarios
					&& Qdo o Periodo informado envolver mais de um
					&& mes
*----------------------------------------------------------------------*
*
* DICA : DETECTAR DIFERENCA ENTRE VALOR CONTABIL E BASES ///
*----------------------------------------------------------------------*
*
* SELECT  NOTA ,;
*          TOTAL_NOTA,;
*          (BASE_ICMS+BASE_ISENT+VLR_IPI+BASE_OUTR+BASE_ISS) AS SOMA;
*	FROM q:\scgc\central\nota;
*	WHERE   	empresa = 3;
*		AND data >= M.dt_inicio AND  data <= M.dt_fim ;
*		AND ch_opera <> "5" ;
*       AND TOTAL_NOTA <> (BASE_ICMS+BASE_ISENT+VLR_IPI+BASE_OUTR+BASE_ISS)
*----------------------------------------------------------------------*




	DO WHILE MONTH(m.dt_inicio) <= MONTH(m.dt_fim) AND  ;
			 YEAR(m.dt_inicio)  <= YEAR(m.dt_fim)


		IF MONTH(m.dt_inicio)   = MONTH(m.dt_fim) AND  ;
			 YEAR(m.dt_inicio)  = YEAR(m.dt_fim)
			LDctrlFim = m.dt_fim
		ELSE
			LDctrlFim = GOMONTH(m.dt_inicio,1)-DAY(GOMONTH(m.dt_inicio,1))
		ENDIF

		
		DO CtrlSaida WITH	;
				(m.empresa),(m.dt_inicio),(LDctrlFim),(LFAnSaida), ;
				(LFStSaida), (LFResCfoS), (LFResUfS), LNpagina,;
				(LSuf_destino)

		m.dt_inicio =	GOMONTH(m.dt_inicio,1)
	ENDDO

	SHOW WINDOW SCT0315 TOP
RETURN

*-------------------------------------------------------------------*
*	PROCEDURE ANTCtrlSaida
*   PROCEDURE ANTULProcSaida   PARAM LNEmp,LDDtInicio,LDDtFim
*	FUNCTION ANTULGeraSai   PARAM LNEmp,LDDtInicio,LDDtFim
*	FUNCTION ANTULArqSaida  PARAM LNemp,LDdtIni,LDdtFim,LSTipo
*-------------------------------------------------------------------*

PROCEDURE ANTANTCtrlSaida
PARAMETERS empresa,dt_inicio,dt_fim,LFAnSaida, ;
				LFStSaida, LFResCfo, LFResUf, LNpagina, LSuf_destino

	PRIVATE	LSProcesso, LNctrnota
	*----------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "NFS" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMPNOTAS  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMPNOTAS  = LSaliastmp

	*----------------------------------------------------------*
	*----------------------------------------------------------*
	*    GERAR ARQ. RESUMO CONTENDO SO AS NOTAS DO PERIODO E DA
	* EMPRESA SELECIONADA PARA ACELERAR OS OUTROS SELECTs
	*----------------------------------------------------------*
	*----------------------------------------------------------*
	dbf_NOTAS  = wp_dirdat+'NOTA.DBF'
	

	IF !EMPTY(LSuf_destino)
		SELECT  NOTA , SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
		FROM &dbf_NOTAS ;
		WHERE   	empresa = M.EMPRESA;
			AND data >= M.dt_inicio AND  data <= M.dt_fim ;
			AND ch_opera <> "5" ;
			AND UF = LSuf_destino ;
	    INTO TABLE &dbf_TMPNOTAS
	ELSE
		SELECT  NOTA , SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
		FROM &dbf_NOTAS ;
		WHERE   	empresa = M.EMPRESA;
			AND data >= M.dt_inicio AND  data <= M.dt_fim ;
			AND ch_opera <> "5" ;
	    INTO TABLE &dbf_TMPNOTAS
	ENDIF
	*----------------------------------------------------------*

	DO ULProcSaida  WITH ;
				(m.empresa),(m.dt_inicio),(m.dt_fim),(LFAnSaida), ;
				(LFStSaida), (LFResCfo), (LFResUf), LNpagina

	*----------------------------------------------------------*
	SELECT &als_TMPNOTAS
	USE

	SELE nota
RETURN				


*-------------------------------------------------------------------*


*-------------------------------------------------------------------*
PROCEDURE ANTULProcSaida
	*------------------------------------------------------------*
	* CLASSIFICACAO:  [????]
	*------------------------------------------------------------*
	* OBJETIVO....: Controla o Processo de Impressao dos relatorios
	*	de saida nos varios meses e mantendo-os agregados
	*------------------------------------------------------------*
	* COMENTARIO..: A rotina permite que o periodo informado seja
	*		impresso por mes e controla a agregacao dos relatorios
	*------------------------------------------------------------*
	* OBS........ :
	*------------------------------------------------------------*
	*  TABELAS....:
	*------------------------------------------------------------*
	*  PARAMETROS..:
	*		LNemp..........: Empresa
	*		LDDtInicio.....: Data inicial
	*       LDDtFim........: Data Final
	*       LFAnSaida......: Flag de Solicitaca Rel Analitico de Saida
	*       LFStSaida......: Flag de Solicitaca Rel Sintetico de Saida
	*		LFResCfo.......: Flag de Solicitaca Rel Sintetico de Saida
	*		, LFResUf, LNpagina
	*
	*------------------------------------------------------------*
	*  RETORNO.....:                                             *
	*------------------------------------------------------------*
	PARAMETERS LNEmp,LDDtInicio,LDDtFim, LFAnSaida, ;
				LFStSaida, LFResCfo, LFResUf, LNpagina

	LFLdireciona  = .F. && Ativa PRTSETUP para direcionar impressao DEF(.T.)
	LFLagrega 	  = .F. && Agrega o ??.REL em ??.AGR			    DEF(.F.)
	LFLfimagrega  = .F. && Qdo. Estiver agregando => encerra        DEF(.F.)


	**********************************************************************
	m.inscricao 	= empresa.inscricao
	LDdtimpr  		=  LDDtInicio	&& VAI ORIENTAR A IMPRESSAO MES A MES
	LFcontinua 		= .t.  			&& CAPTURA O VALOR DE LFsegue
	*********************>>> RELATORIO GERAL <<<*********************
	LNpagina = LNpagina - 1   && DESCONTA O VLR. INICIAL DE _PAGENO


	
	*   DETERMINA O PERIODO DE MES PARA IMPRESSAO ********


	LDper_ini = LDDtInicio
	LDper_fim = LDDtFim

	*****************************************************************

	IF LFAnSaida OR LFStSaida
		DO ULSaiImprel WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	**************************>>> RESUMO POR CFO
	IF LFResCfo or LFcfosintegra
		DO ULSaiImpcfo WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	**************************>>> RESUMO POR UF
	IF LFResUf
		DO ULSaiImpuf WITH (LNEmp),(LDDtInicio),(LDDtFim), LNpagina
	ENDIF
	*-----------------------------
RETURN	
	

*---------------------------------------------------------------*
*	PROCEDURE ANTULimprel
*		PARAMETERS LNemp, LDMesImpr
*	FUNCTION ANTULvervlr
*		PARAMETERS NOTA,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
*				 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS
*---------------------------------------------------------------*
*---------------------------------------------------------------*
*  ROTINA IMPRESSAO RELATORI ANALITICO OU SITETICO
*---------------------------------------------------------------*

PROCEDURE ANTULSaiImprel
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina

	*--------------------------------------------------------------*

	* 1a) Seleciona Todas Notas de Saida Normal (Nao Relacionadas a Cupons)
	* 2a) Relaciona Todas Notas C╒pias de Cupons (Zerando Valores)
	* 3a) Totaliza os Cupons (Agrupando por Dia,CFO e Aliquota)
    * OBS : 1a UNION 2a (UNION 3a)


	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "TM1" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMP1  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMP1  = LSaliastmp
	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "TM2" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMP2  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMP2  = LSaliastmp
	*--------------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "LVR" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMPLIVRO  = wp_dirtmp+LSaliastmp+".DBF"
	als_TMPLIVRO  = LSaliastmp
	*--------------------------------------------------------------*


	*--------------------------------------------------------------*


	SELECT  NOTA AS NFS, SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
	FROM &dbf_TMPNOTAS;
	WHERE  cupom = 0 ;
    INTO TABLE &dbf_TMP1



	SELECT * FROM  &dbf_TMP1 ;
	UNION ;
	(SELECT  NOTA AS NFS, SERIE, DATA, HORA, UF, CFO, ;
	        STATUS,'C' as OPERACAO, CUPOM, ;
			0 as TOTSERVICO, 0 as BASE_ISS, 0 as  ALIQ_ISS, 0 as  VLR_ISS, ;
			0 as BASE_ICMS,	 0 as ALIQ_ICMS,0 as  VLR_ICMS, ;
			0 as BASE_SBBRT, 0 as BASE_SUBS,0 as  ICMS_SUBS, ;
			0 as BASE_ISENT, 0 as BASE_OUTR,0 as  BASE_ISIPI,;
			0 as BASE_IPI,   0 as VLR_IPI,;
			0 as TOTPRODUTO, 0 as VLRFRETE, 0 as VLRSEGURO, ;
			0 as VLRDESPES, ;
			0 as TOTAL_NOTA ;	
	FROM &dbf_TMPNOTAS ;
	WHERE       nota < 1000000 ;
		   	AND cupom > 0) ;
    INTO TABLE &dbf_TMP2

	SELECT * FROM  &dbf_TMP2 ;
	UNION ;
	(SELECT ;
  	    INT(VAL(CHRTRAN( ;
              "2"+STR(DAY(data),2)+STR(MONTH(data),2)+STR(aliq_icms,2);
             ," ","0"))) AS NFS , ;
	        SERIE, DATA, '99:99:99' AS HORA, UF, CFO,  ;
	        STATUS, OPERACAO, CUPOM, ;
			SUM(TOTSERVICO) AS TOTSERVICO, SUM(BASE_ISS) AS BASE_ISS,;
			ALIQ_ISS, SUM(VLR_ISS) AS VLR_ISS, ;
			SUM(BASE_ICMS) AS BASE_ICMS,ALIQ_ICMS,;
			SUM(VLR_ICMS) AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT, SUM(BASE_SUBS) AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
	 FROM &dbf_TMPNOTAS ;
	 WHERE 	    cupom > 0  ;
	 	   AND  status = 1 ;
	 	   AND OPERACAO = 'S';
    GROUP BY NFS,CFO,UF) ;
    INTO TABLE &dbf_TMPLIVRO


	SELECT  NFS AS NOTA, SERIE, DATA, HORA, UF, CFO, ;
	        STATUS, OPERACAO, CUPOM, ;
			TOTSERVICO, BASE_ISS,  ALIQ_ISS, VLR_ISS, ;
			BASE_ICMS,	ALIQ_ICMS, VLR_ICMS, ;
			BASE_SBBRT, BASE_SUBS, ICMS_SUBS, ;
			BASE_ISENT, BASE_OUTR, ;
			BASE_ISIPI, BASE_IPI,  VLR_IPI, ;
			TOTPRODUTO, ;
			VLRFRETE, VLRSEGURO, VLRDESPES, ;
			TOTAL_NOTA ;	
	FROM &dbf_TMPLIVRO ;
	ORDER BY DATA,NOTA ;
    INTO CURSOR LIVROSAI



	SELECT LIVROSAI
	GO TOP
	LNctrnota = LIVROSAI.nota 	&&CONTADOR PRA VERRIFICAR NUMERACAO DE NF
	*******************
	*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT TO   LNimpressao
	LNimpressos = 0
	GO LNregistro
	*******************
	*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
	*******************	
	**************************>>> REGISTRO DE SAIDAS
	LF_fim  = .f.
    LSrel = "REL220"      && relatorio padrao p/ impressoras ex: epson
    LSorienta = " WHILE  LFsegue "

	DO UPimpressao WITH	(LFLdireciona), (LFLagrega), (LFLfimagrega)

	LFcontinua = LFsegue
	************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU.AO N. PAGINA


	*---------------------------------------------------------*
	IF USED(als_TMP1)
		SELECT &als_TMP1
		USE
	ENDIF
	IF USED(als_TMP2)
		SELECT &als_TMP2
		USE
	ENDIF

	IF USED(als_TMPLIVRO)
		SELECT &als_TMPLIVRO
		USE
	ENDIF

RETURN

*----------------------------------------------------------------*
*  VEREIFICAR VALORES DA NOTA NO RELATORIO DE SAIDAS
*----------------------------------------------------------------*
*	FLG_NROS.......: .F. => NAO VERIFICA NUMERACAO (REL220_I)
*                    .T. => VERIFICA NUMERACAO (REL220)
*----------------------------------------------------------------*

FUNCTION ANTULvervlr
	PARAMETERS LNnota,STATUS,OPERACAO,TOTAL_NOTA,BASE_ICMS,;
			 BASE_ISENT,VLR_IPI,BASE_OUTR,BASE_ISS,BASE_SUBS,FLG_NROS
	*-------------------------------------------------------------*
	* VERIFICACAO DE NUMERACAO DE NOTA
	*-------------------------------------------------------------*
	

	IF FLG_NROS AND LNnota < 1000000		&& NAO E CUPOM
		DO WHILE LNctrnota < LNnota
		   LSnfs = STR(LNctrnota,7)
		   DO OBJ_MENS.SPR WITH  "Falta Nota Numero : "+LSnfs
		   LNctrnota = LNctrnota + 1						
		ENDDO
		LNctrnota = LNctrnota + 1						
	ENDIF
	*-------------------------------------------------------------*
	* VERIFICACAO DE VALOR DE NOTA
	*-------------------------------------------------------------*
	IF TOTAL_NOTA+VLR_IPI <> BASE_ICMS+BASE_ISENT+VLR_IPI+;
					  BASE_OUTR+BASE_ISS+icms_subs
	   LSnfs = STR(LNnota,7)
       WAIT WINDOW "Erro no Fechamento da Nota  Numero : "+LSnfs NOWAIT
	
*	   DO OBJ_MENS.SPR WITH ;
 * 	       "Erro no Fechamento da Nota  Numero : "+LSnfs
	ENDIF
RETURN(.T.)


PROCEDURE ANTULSaiImpcfo   	&& RESUMO POR CFO
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina

	*----------------------------------------------------------*
	LSarqtmp 	= "" 			&& EX: C:\TMP\TMP0001
	LSaliastmp 	= "CRS" 		&&     TMP001
	LSaliastmp = UPopentmp(wp_dirtmp,LSarqtmp,LSaliastmp,1)
	IF EMPTY(LSaliastmp)
		WAIT WINDOW 'Nфo Foi Possivel Definir Arquivo Temporario'
		RETURN
	ENDIF
	dbf_TMPCURSOR = wp_dirtmp+LSaliastmp+".DBF"
	als_TMPCURSOR  = LSaliastmp
	*----------------------------------------------------------*


	IF !LFcfosintegra
		SELECT  CFO,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(ROUND(base_icms * aliq_icms / 100,2)) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		FROM &dbf_TMPNOTAS ;
		WHERE       status = 1 ;
		   AND  operacao  = "S";
    	GROUP BY CFO;
	    ORDER BY CFO;
    	INTO CURSOR LIVROSAI
	ELSE
		SELECT  "5.00" AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(ROUND(base_icms * aliq_icms / 100,2)) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		FROM &dbf_TMPNOTAS ;
		WHERE       status = 1 ;
		   AND  operacao  = "S" ;
		   AND  cupom > 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP1CURSOR


		SELECT * FROM TMP1CURSOR ;
		UNION ;
		SELECT  "CANC" AS CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(ROUND(base_icms * aliq_icms / 100,2)) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		FROM &dbf_TMPNOTAS ;
		WHERE       status = 2 ;
		   AND  operacao  = "S" ;
		   AND  cupom > 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP2CURSOR



		SELECT * FROM TMP2CURSOR ;
		UNION ;
		SELECT  CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(ROUND(base_icms * aliq_icms / 100,2)) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		FROM &dbf_TMPNOTAS ;
		WHERE       status = 1 ;
		   AND  operacao  = "S" ;
		   AND  cupom = 0 ;
		GROUP BY CFO;
    	INTO CURSOR TMP3CURSOR

		SELECT  CFO ,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(VLR_ICMS) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
		 FROM TMP3CURSOR ;
			GROUP BY CFO;
    		ORDER BY CFO;
			    INTO CURSOR LIVROSAI
	ENDIF

	IF EOF()
 		SELE nota
		UNLOCK
 		RETURN
 	ENDIF		
	GO TOP
*******************
*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT  TO LNimpressao
	LNimpressos = 0
	GO LNregistro
*******************
*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
**************************>>> REGISTRO DE SAIDAS
    LSrel = "REL220A"      && relatorio padrao p/ impressoras ex: epson

    LSorienta = " WHILE  LFsegue "

	DO UPimpressao WITH 	(LFLdireciona), (LFLagrega), (LFLfimagrega)
	LFcontinua = LFsegue
************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU AO N. PAGINA
RETURN



PROCEDURE ANTULSaiImpuf   && RESUMO POR ESTADO
PARAMETERS LNemp, LDTInicio, LDTFim, LNpagina


	SELECT  UF,  ;
			SUM(TOTSERVICO) AS TOTSERVICO, ;
			SUM(BASE_ISS) 	AS BASE_ISS,;
			SUM(VLR_ISS) 	AS VLR_ISS, ;
			SUM(BASE_ICMS) 	AS BASE_ICMS,;
			SUM(ROUND(base_icms * aliq_icms / 100,2)) 	AS VLR_ICMS, ;
			SUM(BASE_SBBRT) AS BASE_SBBRT,;
			SUM(BASE_SUBS) 	AS BASE_SUBS, ;
			SUM(ICMS_SUBS)  AS ICMS_SUBS,;
			SUM(BASE_ISENT) AS BASE_ISENT,;
			SUM(BASE_OUTR)  AS BASE_OUTR, ;
			SUM(BASE_ISIPI) AS BASE_ISIPI,;
			SUM(BASE_IPI)   AS BASE_IPI,  ;
			SUM(VLR_IPI)    AS VLR_IPI,   ;
			SUM(TOTPRODUTO) AS TOTPRODUTO, ;
			SUM(VLRFRETE)   AS VLRFRETE,  ;
			SUM(VLRSEGURO)  AS VLRSEGURO,;
			SUM(VLRDESPES)  AS VLRDESPES, ;
			SUM(TOTAL_NOTA) AS TOTAL_NOTA ;	
	FROM &dbf_TMPNOTAS ;
	WHERE       status = 1 ;
		   AND  operacao  = "S";
    GROUP BY UF;
    ORDER BY UF;
    INTO CURSOR LIVROSAI


	IF EOF()
 		SELE nota
		UNLOCK
 		RETURN
 	ENDIF		
	GO TOP
*******************
*---->   (INICIALIZACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
	DO RELINIC.PRG          && INICIA VAR P/ TERMOMETRO
	LFsegue = .t.
	LNregistro = RECNO()
    COUNT  TO LNimpressao
	LNimpressos = 0
	GO LNregistro
*******************
*---->   (COMPLETADO PREPARACAO DO CONTROLE DE STATUS IMPRESSAO)
*******************	
**************************>>> REGISTRO DE SAIDAS
    LSrel = "REL220B"      && relatorio padrao p/ impressoras ex: epson
    LSorienta =  " WHILE  LFsegue "
	DO UPimpressao WITH 	(LFLdireciona), (LFLagrega), (LFLfimagrega)
	LFcontinua = LFsegue
************
	DO RELFIM.PRG          && FIM VAR P/ TERMOMETRO
	LNpagina = LNpagina + _PAGENO - 1   && DAR SEQU AO N. PAGINA
RETURN


FUNCTION ANTULini
	LF_fim  = .f.
RETURN(" ")

FUNCTION ANTULfim
	LF_fim  = .t.
RETURN(" ")

